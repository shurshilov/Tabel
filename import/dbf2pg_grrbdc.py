#!/usr/bin/env python 
# -*- coding: UTF-8 -*-
from dbfpy import dbf
import psycopg2
import datetime
import sys
import parus_id_to_odoo
def post_func(directory,dbname,userr,pas,hostt,portt):
	ank = dbf.Dbf(directory+"zgrrbdc.dbf")
	f_ank = open(directory+'grrbdc.csv', 'w')
	f_ank.write ("ID; CODE; NAME; DAYSMEAN; HOURMEAN; WORKWEEK; DAYSMIN; HOURMIN \n")
	#print len(ank)
	for i in ank:
		if i.deleted or i["GRRBDC_RN"] == None or i["CODE"] == None or i["NAME"] == None or i["DAYSMEAN"] == None or i["HOURMEAN"] == None or i["WORKWEEK"] == None or i["DAYSMIN"] == None:
			continue
		f_ank.write ("\""+ str ( parus_id_to_odoo.parusIndexToOdoo ( i ["GRRBDC_RN"].decode('cp1251').encode('utf-8').decode('utf-8') ))+"\""+"; ")
		f_ank.write ("\""+ str ( i["CODE"] ).decode('cp1251').encode('utf-8')+"\""+"; ")
		f_ank.write ("\""+ str ( i["NAME"] ).decode('cp1251').encode('utf-8')+"\""+"; ")
		f_ank.write ("\""+ str ( i["DAYSMEAN"] ).decode('cp1251').encode('utf-8')+"\""+"; ")
		f_ank.write ("\""+ str ( i["HOURMEAN"] ).decode('cp1251').encode('utf-8')+"\""+"; ")
		f_ank.write ("\""+ str ( int(i["WORKWEEK"]) ).decode('cp1251').encode('utf-8')+"\""+"; ")
		f_ank.write ("\""+ str ( i["DAYSMIN"] ).decode('cp1251').encode('utf-8')+"\""+"; ")
		f_ank.write ("\""+ str ( i["HOURMIN"] ).decode('cp1251').encode('utf-8')+"\""+"\n")

	print "zgrrbdc.dbf to grrbdc.csv [ ok ]"
	f_ank.close()
	#CONNECT TO DATABASE
	con = psycopg2.connect(database=dbname, user=userr,password=pas,host=hostt,port=portt)
	cur = con.cursor()
	#cur.execute ("DELETE from tabel_ank;")
	
	#OPEN CSV FILE GENERATED BY syncronize.py script
	my_file = open(directory+'grrbdc.csv')

	#CREATE TEMP TABLE
	cur.execute("CREATE TEMP TABLE tmp_z (ID int, CODE text, NAME text, DAYSMEAN double precision, HOURMEAN double precision, WORKWEEK int, DAYSMIN double precision, HOURMIN double precision);") 
	cur.copy_expert("COPY tmp_z FROM STDIN WITH DELIMITER ';' CSV HEADER;", my_file)

	#UPDATE DATA
	cur.execute("UPDATE tabel_grrbdc SET  CODE=tmp_z.CODE, NAME=tmp_z.NAME, DAYSMEAN=tmp_z.DAYSMEAN, HOURMEAN=tmp_z.HOURMEAN, WORKWEEK=tmp_z.WORKWEEK, DAYSMIN=tmp_z.DAYSMIN, HOURMIN=tmp_z.HOURMIN FROM tmp_z WHERE  tabel_grrbdc.id = tmp_z.id;")

	#INSERT DATA add something which lacks
	cur.execute("INSERT INTO tabel_grrbdc (id, code, name, daysmean, hourmean, workweek, daysmin, hourmin) SELECT T.id, T.CODE, T.NAME, T.DAYSMEAN, T.HOURMEAN, T.WORKWEEK, T.DAYSMIN, T.HOURMIN FROM tmp_z AS T LEFT JOIN tabel_grrbdc AS P  ON T.id = P.id WHERE P.id IS NULL ;")

	#DROP TEMP TABLE or auto drop after session
	cur.execute("DROP TABLE tmp_z;")

	#CLOSE CONNECTION
	con.commit()
	cur.close()
	con.close()
	print "sql requests for grrbdc table [ ok ]"